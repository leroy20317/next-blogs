name: Deploy next blog

on:
  # 手动触发
  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  build:
    # 使用ubuntu系统镜像运行自动化脚本
    runs-on: ubuntu-latest

    steps:
      # 切换分支
      - name: Checkout
        uses: actions/checkout@v4

      #      # 下载 git submodule
      #      - uses: srt32/git-actions@v0.0.3
      #        with:
      #          args: git submodule update --init --recursive

      # 使用 node:lts/iron
      - name: use Node.js lts/iron
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/iron'
          cache: 'npm'

      # 缓存 node modules
      - name: Cache node modules
        uses: actions/cache@v4
        id: cache
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: node_modules
          #path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # npm install
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      # Create .env
      - name: Create .env
        env:
          ACCESSKEY: ${{ secrets.ACCESSKEY }}
          SECRETKEY: ${{ secrets.SECRETKEY }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
        run: |
          echo ACCESSKEY="$ACCESSKEY" >> .env
          echo SECRETKEY="$SECRETKEY" >> .env
          echo CLIENT_SECRET="$CLIENT_SECRET" >> .env
          echo CLIENT_ID="$CLIENT_ID" >> .env
        shell: bash

      # Publish
      - name: Publish
        run: npm run publish

      # tar
      - name: Tar dist
        run: tar zcf build.tar.gz build package.json package-lock.json next.config.js

      # Deploy to server
      - name: Deploy to server
        id: deploy
        uses: appleboy/scp-action@v0.1.7
        with:
          #host: "foo.com,bar.com"
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.ACCESS_TOKEN }}
          source: "build.tar.gz"
          target: /wwwroot/next-blogs

      # 远程Command
      - name: Command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.ACCESS_TOKEN }}
          script: |
            cd /wwwroot/next-blogs
            rm -rf build
            tar zxf build.tar.gz
            rm build.tar.gz
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh
            npm i
            pm2 stop next-blogs
            pm2 delete next-blogs
            npm run pm2
            pm2 save
            echo "Complete!!!"
